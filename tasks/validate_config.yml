# SPDX-FileCopyrightText: 2023 Julian-Samuel GebÃ¼hr
# SPDX-FileCopyrightText: 2023 Slavi Pantaleev
#
# SPDX-License-Identifier: AGPL-3.0-or-later

---
- name: (Deprecation) Catch and report renamed settings
  ansible.builtin.fail:
    msg: >-
      Your configuration contains a variable, which now has a different name.
      Please change your configuration to rename the variable (`{{ item.old }}` -> `{{ item.new }}`).
  when: "lookup('ansible.builtin.varnames', ('^' + item.old + '$'), wantlist=True) | length > 0"
  with_items:
    - { "old": "healthchecks_systemd_required_systemd_services_list_default", "new": "healthchecks_systemd_required_services_list_default" }
    - { "old": "healthchecks_systemd_required_systemd_services_list_auto", "new": "healthchecks_systemd_required_services_list_auto" }
    - { "old": "healthchecks_systemd_required_systemd_services_list_custom", "new": "healthchecks_systemd_required_services_list_custom" }
    - { "old": "healthchecks_systemd_wanted_systemd_services_list_default", "new": "healthchecks_systemd_wanted_services_list_default" }
    - { "old": "healthchecks_systemd_wanted_systemd_services_list_auto", "new": "healthchecks_systemd_wanted_services_list_auto" }
    - { "old": "healthchecks_systemd_wanted_systemd_services_list_custom", "new": "healthchecks_systemd_wanted_services_list_custom" }
    - { "old": "healthchecks_http_header_content_permission_policy", "new": "healthchecks_http_header_permissions_policy" }

- name: Fail if required Healthchecks settings not defined
  ansible.builtin.fail:
    msg: >-
      You need to define a required configuration setting (`{{ item }}`).
  when: "lookup('vars', item, default='') | string | length == 0"
  with_items:
    - healthchecks_identifier
    - healthchecks_uid
    - healthchecks_gid
    - healthchecks_hostname
    - healthchecks_path_prefix
    - healthchecks_container_network
    - healthchecks_environment_variable_secret_key

- name: Fail if Healthchecks database type invalid
  ansible.builtin.fail:
    msg: >-
      healthchecks_database_type must be 'mysql', 'postgres' or 'sqlite'
  when: "healthchecks_database_type not in ['mysql', 'postgres', 'sqlite']"

- name: Fail if required Healthchecks + MySQL integration settings not defined
  ansible.builtin.fail:
    msg: >-
      You need to define a required configuration setting (`{{ item }}`) when `healthchecks_database_type` is `mysql`
  when: "healthchecks_database_type == 'mysql' and lookup('vars', item, default='') | string | length == 0"
  with_items:
    - healthchecks_database_mysql_hostname
    - healthchecks_database_mysql_password

- name: Fail if required Healthchecks + Postgres integration settings not defined
  ansible.builtin.fail:
    msg: >-
      You need to define a required configuration setting (`{{ item }}`) when `healthchecks_database_type` is `postgres`
  when: "healthchecks_database_type == 'postgres' and lookup('vars', item, default='') | string | length == 0"
  with_items:
    - healthchecks_database_hostname
    - healthchecks_database_password

- name: Fail if SMTP settings are missing (and SMTP is enabled by setting host)
  ansible.builtin.fail:
    msg: >-
      You need to define a required configuration setting (`{{ item }}`) to correctly set up email via SMTP.
  when: "healthchecks_environment_variable_email_host != '' and lookup('vars', item, default='') | string | length == 0"
  with_items:
    - healthchecks_environment_variable_default_from_email

- name: Run if Traefik is enabled
  when: healthchecks_container_labels_traefik_enabled | bool
  block:
    - name: Fail if Traefik settings required for Healthchecks are not defined
      ansible.builtin.fail:
        msg: >-
          You need to define a required configuration setting (`{{ item }}`).
      when: "lookup('vars', item, default='') | string | length == 0"
      with_items:
        - healthchecks_container_labels_traefik_hostname
        - healthchecks_container_labels_traefik_path_prefix

    # We ensure it doesn't end with a slash, because we handle both (slash and no-slash).
    # Knowing that `healthchecks_container_labels_traefik_path_prefix` does not end with a slash
    # ensures we know how to set these routes up without having to do "does it end with a slash" checks elsewhere.
    - name: Fail if healthchecks_container_labels_traefik_path_prefix ends with a slash
      ansible.builtin.fail:
        msg: >-
          healthchecks_container_labels_traefik_path_prefix (`{{ healthchecks_container_labels_traefik_path_prefix }}`) must either be `/` or not end with a slash (e.g. `/healthchecks`).
      when: "healthchecks_container_labels_traefik_path_prefix != '/' and healthchecks_container_labels_traefik_path_prefix[-1] == '/'"
